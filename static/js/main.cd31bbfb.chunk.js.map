{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","email","password","rememberMe","captcha","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","clearDataAC","fetchTodolistsTC","todolists","forEach","tl","items","setTasksAC","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","addTask","useDispatch","todolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","useSelector","state","auth","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","name","handleChange","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd31bbfb.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c2fb6fdc-8efc-4068-aa85-9235a23b8e79'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<GetMeResponse>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe?: boolean, captcha?: boolean) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<LoginResponse>>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: boolean\r\n}\r\n\r\ntype LoginResponse = {\r\n    userId: number\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\ntype GetMeResponse = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {\r\n    AppActionsType,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType,\r\n    setIsInitializedAC\r\n} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {addTaskAC} from '../TodolistsList/tasks-reducer';\r\nimport {clearDataAC, TodolistsActionsType} from '../TodolistsList/todolists-reducer';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (email: string, password: string, rememberMe?: boolean, captcha?: boolean) => (dispatch: Dispatch<AuthActionsType| SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(email, password, rememberMe, captcha)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<AuthActionsType | AppActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(clearDataAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                /*dispatch(setIsInitializedAC())*/\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | TodolistsActionsType\r\n","import {AuthActionsType, setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    //сделан ли запрос на сервер с проверкой авторизации\r\n    isInitialized: boolean\r\n}\r\n\r\n//types\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetInitializingStatusActionType\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializingStatusActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n//action creators\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\n\r\n//thunk creators\r\nexport const initializeAppTC = () => (dispatch: Dispatch<AppActionsType | AuthActionsType>) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n            dispatch(setAppErrorAC(res.data.messages[0]))\r\n        }\r\n        dispatch(setIsInitializedAC())\r\n    })\r\n}\r\n\r\n\r\n\r\n","import {\r\n    AddTodolistActionType,\r\n    ClearDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'CLEAR-DATA':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ClearDataActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\ntype ThunkDispatch = Dispatch<TasksActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {fetchTasksTC, setTasksAC, TasksActionsType} from './tasks-reducer';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CLEAR-DATA':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\nexport const clearDataAC = () => ({type: 'CLEAR-DATA'} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                return (res.data)\r\n            })\r\n            .then(todolists => {\r\n                todolists.forEach(tl => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<TodolistsActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ClearDataActionType = ReturnType<typeof clearDataAC>;\r\nexport type TodolistsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ClearDataActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<TodolistsActionsType | SetAppStatusActionType | SetAppErrorActionType | TasksActionsType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    /*console.log('AddItemForm called')*/\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    /*console.log('EditableSpan called');*/\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    /*console.log('Todolist called')*/\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    /*useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])*/\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {TasksStateType} from '../TodolistsList/tasks-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string,\r\n    password?: string,\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password, values.rememberMe, true))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')}/>\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox name={'rememberMe'} onChange={formik.handleChange}\r\n                                                             value={formik.values.rememberMe}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport { Menu } from '@mui/icons-material';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {CircularProgress} from '@mui/material';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logOut = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logOut} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/404'} element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}